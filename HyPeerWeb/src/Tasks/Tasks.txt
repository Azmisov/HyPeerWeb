Done(No)	ChatClient (GUI) 
Done(No)		ChatTab 
Done(No)			store active user; don't show active user in Send-To box 
Done(Yes)			interface with the ChatServer
Done(No)			NodeCache to hold all node information; have cache handle all selection handling
	
Done(Yes)		GraphTab 
Done(Yes)			Convert HyPeerWebGraph code to new GUI 
Done(Yes)			implement Graph drawing modes (Default, Tree, Petrie)

Done(Yes)		ListTab 
Done(Yes)			Toolbar at top has combo box to select which segment's node's to view 
Done(Yes)			Show a list of nodes in a table; include info like: parent, neighbors, folds, height, webid, etc 
Done(Yes)			Have option to show all nodes, with added table column for segment

Done(No)		Action bar 
Done(No)			NetworkingBox: UI, talk to ChatServer
Done(No)			ConnectionBox: UI, talk to ChatServer
Done(No)			NodeBox: UI, talk to GraphTab/ListTab and ChatServer

Done(No)	HyPeerWeb Segments 
Done(Yes)		Change state to "corrupt" if we ever encounter an exception
Done(Yes)		Fix these methods (these all need to use some variation of Visitor pattern to get working)
Done(Yes)			getNode: get any node in the HyPeerWeb, not just on current segment 
Done(Yes)			getAllNodes: get an ordered list of nodes from every segment in the web 
Done(Yes)			getRandomNode: won't work for distributed system 
Done(Yes)			removeNode: navigate to segment that has the node before removing 
Done(Yes)			addNode: navigate to segment that has a node (unless state is "has_zero") before adding
Done(No)		Create these methods 
Done(No)			disconnect from HyPeerWeb 
Done(No)			block/pause/shutdown entire HyPeerWeb 

Done(Yes)	InceptionWeb/ChatServer 
Done(Yes)		finish writing skeleton 
Done(Yes)		username's, network name, generation etc.
Done(Yes)		implement skeleton methods (i.e. talk to ChatClient and HWSegments)

Done(No)	Proxies & Networking 
Done(Yes)		Implement Woodfield's proxy stuff 
Done(Yes)		Optimize NodeProxy to hold stuff like height/webID by default 
Done(No)		MockConnections class for testing purposes 
Done(No)		make add/removeNode add to the segment that made the request
Done(No)		Allow multiple segments per machine (different ports), to allow multiple HyPeerWeb processes
Done(No)		Testing & Optimization: minimize network communications as much as possible (group things in .executeRemotely like HAS_ONE.addNode)

Done(No)	Database 
Done(No)		distributed database; current commit system will not work anymore (store NodeCache in file???)
Done(No)		write better recovery unit tests 

Done(No)	Multi-threading/Concurrency 
Done(No)		??? see if Woodfield knows any good ways to implement this

Done(No)	Other 
Done(Yes)		make Node's fold state pattern use enums
Done(No)		add assert statements before all methods?
Done(No)		remove all unused code 
Done(No)		write any missing JavaDoc 
Done(No)		RSA signing of ChatServer requests? that might be kind of fun
Done(No)		celebration + pizza party!

QUALITY CHECKING:
===================
HyPeerWebSegment:
	x constructor 1
	- constructor 3
	- removeNode(int)
	- removeNode(Node)
	- removeAllNodes
	- addNode
	- addNode (proxy)
	- HyPeerWebState
		- HAS_NONE
			- addNode
			- removeNode
		- HAS_ONE
			- addNode
			- removeNode
		- HAS_MANY
			- addNode
			- removeNode
	- changeState
	- getFirstSegmentNode
	- getLastSegmentNode
	- getSegmentSize
	- isSegmentEmpty
	- getNonemptySegment
	- getSegmentNodeByUID
	- getRandomNode
	- getNode
	- isEmpty
	- getCache
	- store
	- restore
	- executeRemotely

Questions:
- are anonymous inner classes serializable
- is an extended class of a serializable object automatically serializable?
- will AbstractVisitor listeners execute on machine that contains node? We're
	banking on the fact that this is possible
- should we allow null listeners in HyPeerWebSegment
- do proxies need UID? is there any case we reference node.UID when it would be a proxy
- make sure executeRemotely is really doing just that
- can we cache fold-state? in node proxies
